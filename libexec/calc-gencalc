#!/usr/bin/env node

const DEBUG = !!process.env["DEBUG"];

const TEMPLATE_LOCATION = "../src/doc.tmp.tex";
const OUTPUT_LOCATION = "../out";


const calc = require('../ll.json');
const calcParser = require("../lib/parser.js");
const parser = calcParser(calc).parser;

const fs = require("fs");
const path = require("path");
const { execSync } = require('child_process');



let latexFormula = function (str) {
  let node = parser.parse(str);
  string = node.toString({style: "latex_se", brackets: true});
  // string = string.replace(/^\((.*)\)$/, (a, b) => b);
  return string;
}


let latexRule = function (name, fs) {
  let latexFs = fs.reverse()
  .map(f => f === "" ? "" : latexFormula(f))
  .map(f => `{${f}}`)
  .join('');
  return `\\prftree[r]{$${name}$}${latexFs}`;
}

const rewriteLatexRule = function (str) {
  // Rewrite rules are bullshit
  const latexRewriteRules = [
    [ /\?\ X(\d*)/g, "\\Gamma$1" ],
    [ /\?\ Y(\d*)/g, "\\Delta$1" ],
    [ /\?\ Z(\d*)/g, "\\Theta$1" ],
    [ /\?\_F\ /g, "" ],
    [ /\?\_F\ /g, "" ],
    [ /\?\_F\ /g, "" ]
  ]
  // rewrite the result
  latexRewriteRules.forEach(rule => {
    str = str.replace(rule[0], (_, n) => rule[1].replace("$1", n === "" ? "" : "_" + n));
  })
  return str;
}

// TODO - add meta calculus information
let calculus = [];
Object.keys(calc.rules).forEach(ctx => {
  calculus.push(`\n\n\\subsubsection*{${ctx}}\n\n`)
  calculus.push(`\\begin{tabularx}{\\linewidth}{CCC}\n`)
  Object.keys(calc.rules[ctx]).forEach((ruleName, i) => {
    let latexRuleName = calc.calc_structure_rules[ctx][ruleName].latex;
    let ruleDef = calc.rules[ctx][ruleName];
    let result = latexRule(latexRuleName, ruleDef);
    let formattedResult = rewriteLatexRule(result);
    calculus.push("  "+formattedResult);
    if(i < Object.keys(calc.rules[ctx]).length - 1) {
      if(i>0 && (i+1)%3 === 0) {
        calculus.push("\n\\\\\\\\\n");
      } else {
        calculus.push("\n&\n");
      }
    }
  })
  calculus.push(`\n\\end{tabularx}\n`)
})

let str = calculus.join("");

let template_path = path.join(__dirname, TEMPLATE_LOCATION);
let template_str = fs.readFileSync(template_path, {encoding: "utf8"});

let out = template_str.replace(/\%\-\-(.*)\-\-\%/, str);


let out_path = path.join(__dirname, OUTPUT_LOCATION, "doc.tex");
fs.writeFileSync(out_path, out);

let out_pdf = path.join(__dirname, OUTPUT_LOCATION, "doc.pdf")
let final_location = path.join(__dirname, "../doc")
execSync(`latexmk -cd -pdf ${out_path}`)
execSync(`mv ${out_pdf} ${final_location}`)
