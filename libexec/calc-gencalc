#!/usr/bin/env node

const DEBUG = !!process.env["DEBUG"];

const CORE_TEMPLATE_LOCATION = "../src/calculus_core_se.tmp.thy";
const CALC_TEMPLATE_LOCATION = "../src/calculus_se.tmp.thy";
const OUTPUT_LOCATION = "../out";


const calc = require('../ll.json');
const calcParser = require("../lib/parser.js");
const Parser = calcParser(calc);
const parser = Parser.parser;

const sh = require("shelljs");
sh.config.silent = true;
const {cp, mkdir, cat} = sh;
const {writeFileSync} = require("fs");
const path = require("path");
const { exec, execSync } = require('child_process');

const core_tmp_path = path.join(__dirname, CORE_TEMPLATE_LOCATION);
const calc_tmp_path = path.join(__dirname, CALC_TEMPLATE_LOCATION);
const out_path = path.join(__dirname, OUTPUT_LOCATION, "thy");


mkdir(out_path);
// cp(tmp_path, out_path);

let calc_core = Object.keys(Parser.calc.calc_structure)
  .map(ctxName => {
  let ctx = Parser.calc.calc_structure[ctxName];
  // TODO - ignore shallow things
  let constructors = Object.keys(ctx)
    .filter(ruleName => !("shallow" in ctx[ruleName]) || ctx[ruleName].shallow)
    .map(ruleName => {
    let rule = ctx[ruleName];
    let types = Array.isArray(rule.type)
      ? rule.type
      : "type" in rule
        ? [rule.type]
        : [];
    let syntax = "isabelle_se" in rule
      ? rule.isabelle_se
      : "isabelle" in rule
        ? rule.isabelle
        : "_";
    let child_precedence = "precedence" in rule
      ? "["+rule.precedence.slice(0, -1).join(",")+"]"
      : "";
    let precedence = "precedence" in rule
      ? rule.precedence.slice(-1)
      : "";
    let syntaxBlock = "";
    if(syntax != "_") {
      syntaxBlock = `("${syntax}" ${child_precedence} ${precedence})`;
    }
    return `${ruleName} ${types.join(" ")} ${syntaxBlock}`
  });
  return (`datatype ${ctxName} = ${constructors.join("\n  | ")}`);
}).join("\n\n");


let obj = {calc_core}
let core_template = cat(core_tmp_path).stdout;
let calc_template = cat(calc_tmp_path).stdout;

let calc_core_thy = core_template.replace(/\(\*(.*)\*\)/g, (str, key) => {
  if(key in obj) return obj[key];
  return str;
});


writeFileSync(path.join(out_path, "calculus_core_se.thy"), calc_core_thy);




let calculus = [];
Object.keys(calc.rules).forEach(ctx => {
  Object.keys(calc.rules[ctx]).forEach((ruleName, i) => {
    let ruleDef = calc.rules[ctx][ruleName];
    let asciiRuleName = calc.calc_structure_rules[ctx][ruleName].ascii;
    let isabelle_rule = ruleDef
    .filter(rule => rule !== "")
    .reverse()
    .map(rule => parser
      .parse(rule)
      .toString({
        style: "isabelle_se",
        brackets: true
      }))
    .map(r => "derivable (" + r + ")")
    .join(" \\<Longrightarrow> ")

    calculus.push(`${asciiRuleName}: "${isabelle_rule}"`);

  })
})

let ccc = calculus
.join("\n| ")

obj.ccc = ccc;

let calc_thy = calc_template.replace(/\(\*(.*)\*\)/g, (str, key) => {
  if(key in obj) return obj[key];
  return str;
});

writeFileSync(path.join(out_path, "calculus_se.thy"), calc_thy);



// TODO - change the name of the calculi and add them here
let ROOT = `session "out" = "HOL" +
  options [document = true]
  theories
    calculus_core_se
    calculus_se
`;
writeFileSync(path.join(out_path, "ROOT"), ROOT)

// exec("isabelle build -D . -v", {cwd: out_path}, (error, stdout, stderr) => {
//   console.log(stdout);
//   console.log(stderr);
// });
