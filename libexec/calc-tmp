#!/usr/bin/env node

const calc = require('../ll.json');
const helper = require("../lib/helper.js");
const Sequent = require("../lib/sequent.js");
// const PT = require("../lib/pt.js");
const Proofstate = require("../lib/proofstate.js");
const clc = require('cli-color');
const { saturate } = require('../lib/runner.js');

const Calc = require("../lib/calc.js");
Calc.init(calc);
const Ruleset = require("../lib/ruleset.js");
const {rules, bwd, getRule} = Ruleset.init();


const calcParser = require("../lib/parser.js");
const Parser = calcParser();
const seq_parser = Parser.parser;

// const {parser, lexer} = require("../lib/llt_compiler.js");
// const fs = require("fs");

let args = process.argv.slice(2);

// let formulaStr = "* : F? P, * : F? P -o F? Q |- * : F?Q";
// let formulaStr = "* : ( F? P xx F? Q ) -o  F? X |- * : ( F? P xx F?Q ) -o F? X";
// let formulaStr = "* : F?P xx (F?R && F?Q) |- * : (F?P xx F?R) && (F?P xx F?Q)"
// let formulaStr = "-- : P -o (R & Q) |- -- : (P -o Q) & (P -o R)";
const formula = args[0];
// let llt_path = args[0];

// let llt_program = fs.readFileSync(llt_path, {filetype: "utf8"}).toString();

// let ast = parser.parse(llt_program);
// let add_rules = parser.yy.LLT.db.bwd

// console.log(add_rules);

let node = seq_parser.parse(formula)
let seq = Sequent.fromTree(node);


Object.keys(rules)
.forEach(ruleName => {
  let rule = rules[ruleName];
  console.log(`${ruleName}:\n${rule.map(r => `  ${r}`).join("\n")}\n`);
})
// let ps = new Proofstate();


// let pt = new PT({
//   conclusion: seq
// })

let negative = ["inc", "even", "plus"];

let atoms = Sequent.getAtoms(seq, {rules: Calc.db.rules});
atoms = atoms.filter(atom => negative.indexOf(atom) === -1)


let time = +(new Date());
let seq_ = saturate({seq, atoms, negative, rules, bwd, getRule, calc});
time = +(new Date()) - time;

const right = function (str) {
  return "-".repeat(process.stdout.columns - str.length - 4 ) + "  " + str
}

let stats = `time: ${time}ms\n`;
console.log(`\n\n${right("RESULT")}\n${stats}${seq_.toString({style: "ascii_extensive"})}`);

