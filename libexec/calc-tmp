#!/usr/bin/env node

const calc = require('../ll.json');
const helper = require("../lib/helper.js");
const Sequent = require("../lib/sequent.js");
const PT = require("../lib/pt.js");
const Proofstate = require("../lib/proofstate.js");
const clc = require('cli-color');


const calcParser = require("../lib/parser.js");
const Parser = calcParser(calc);
const parser = Parser.parser;

let args = process.argv.slice(2);

// let formulaStr = "* : F? P, * : F? P -o F? Q |- * : F?Q";
// let formulaStr = "* : ( F? P xx F? Q ) -o  F? X |- * : ( F? P xx F?Q ) -o F? X";
// let formulaStr = "* : F?P xx (F?R && F?Q) |- * : (F?P xx F?R) && (F?P xx F?Q)"
let formulaStr = "-- : P -o (R & Q) |- -- : (P -o Q) & (P -o R)";
const formula = args && args[0] || formulaStr;

let node = parser.parse(formula)
let seq = Sequent.fromTree(node);

let ps = new Proofstate();


let pt = new PT({
  conclusion: seq
})

let negative = ["inc", "even"];

let atoms = Sequent.getAtoms(seq);
// console.log("ASDASDSD");
// console.log(atoms.map(e => e.toString()).join(", "));
atoms = atoms.filter(atom => negative.indexOf(atom) === -1)




const exec = function (seq) {
  // console.log(`exec: ${seq}`);
  let pt = new PT({
    conclusion: seq
  })

  let isProovable = Proofstate.auto(pt, {
    positive: atoms,
    negative,
    debug: true
    // , mode: "proof"
  });

  let str = helper.formatCleanTree(isProovable.debug, "technique")
  // console.log(`DEBUG:\n${str}`);

  const chain = function (pt) {
    // if the end is reached, maybe i have to check wether focus is blurred, otherwise fail
    if(pt.premisses.length === 0) return pt.conclusion;
    let isReducable = pt.premisses.reduceRight((a,c) => a + (c.proven ? 0 : 1), 0) === 1;
    if(!isReducable) return false;
    return chain(pt.premisses.find(ptp => !ptp.proven));
  }

  return chain(pt);
}

let time = +(new Date());
let seq_ = exec(seq);

let focusingSteps = 0;
let success = true;
while(success) {
  success = false;
  focusingSteps ++;

  for(var i = 0; i < Object.keys(seq_.persistent_ctx).length; i++) {
    let id = Object.keys(seq_.persistent_ctx)[i];
    seq__ = Sequent.copy(seq_);
    seq__.linear_ctx[id] = {val: seq_.persistent_ctx[id], num: 1};
    seq__ = exec(seq__)
    if(seq__) {
      // console.log(`res : ${seq__}`);
      seq_ = seq__;
      success = true;
      break;
    }
  }
}
time = +(new Date()) - time;

const right = function (str) {
return "-".repeat(process.stdout.columns - str.length - 4 ) + "  " + str
}

let stats = `time: ${time}ms\nfocusing!: ${focusingSteps}\n`;
console.log(`\n\n${right("RESULT")}\n${stats}${seq_.toString({style: "ascii_extensive"})}`);

